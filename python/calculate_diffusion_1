import numpy as np
import argparse

def read_positions(file_path):
    positions = []
    with open(file_path, 'r') as file:
        current_positions = []
        for line in file:
            if line.startswith("ITEM: TIMESTEP"):
                if current_positions:
                    positions.append(current_positions)  
                current_positions = []  
            elif line.startswith("ITEM: ATOMS"):
                continue 
            else:
                parts = line.split()
                if len(parts) >= 5:
                    try:
                        x, y, z = map(float, parts[2:5])
                        current_positions.append([x, y, z])
                    except ValueError:
                        continue  
        if current_positions:
            positions.append(current_positions)  
    return np.array(positions)

def calculate_msd(positions):
    displacements = positions - positions[0]  
    squared_displacements = np.sum(displacements**2, axis=2) 
    msd = np.mean(squared_displacements, axis=1)
    msd_t= msd[-1]
    s=np.sqrt(msd_t)
    return msd_t, s

def calculate_diffusion_coefficient(msd_t, time_step, step_interval):
    t = time_step * step_interval 
    slope = msd_t / t
    diffusion_coefficient = slope / 4  
    return diffusion_coefficient

def convert_to_spherical(positions):
    # 将笛卡尔坐标转换为球坐标
    x, y, z = positions[..., 0], positions[..., 1], positions[..., 2]
    r = np.sqrt(x**2 + y**2 + z**2)
    theta = np.arccos(z / r)
    phi = np.arctan2(y, x)
    return r, theta, phi

def calculate_average_radius(positions):
    r, _, _ = convert_to_spherical(positions)
    average_radius = np.mean(r[0])  # 使用初始时间步的平均半径
    return average_radius

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Calculate diffusion coefficient from particle positions.')
    parser.add_argument('--file', type=str, required=True, help='Path to the dump file containing particle positions')
    parser.add_argument('--time_step', type=int, default=500, help='Time step interval between outputs')
    parser.add_argument('--step_interval', type=float, default=0.001, help='Time interval for each step')

    args = parser.parse_args()

    positions = read_positions(args.file)
    msd_t, s = calculate_msd(positions)
    diffusion_coefficient = calculate_diffusion_coefficient(msd_t, args.time_step, args.step_interval)
    average_radius = calculate_average_radius(positions)

    print(f"Average Radius: {average_radius:.6f}")
    print(f"Diffusion Coefficient: {diffusion_coefficient:.6f}")
    print(f"RMS Displacement: {s:.6f}")
